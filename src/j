 /**
     * Expression Visitors
     */
    private String visitArrayExpression(JmmNode node, List<Report> reports){
        //JmmMethod method = symbolTable.getParentMethodName(node);

        JmmNode nodeToVisit;
        String name;
        Type type;
        if (node.getJmmParent().getKind().equals("ArrayAssignStmt")) {
            name = node.getJmmParent().getJmmChild(0).get("name");
            nodeToVisit = node.getJmmParent().getJmmChild(0);
            String assignedType = visit(node.getJmmParent().getJmmChild(2), reports);

            List<Symbol> s = symbolTable.getLocalVariables(name);
            if (s!= null) {
            //    if (!symbolTable.getLocalVariables( name).getType().getName().equals(assignedType)) {
            //        addSemanticErrorReport(reports, node, "Array can't be assigned '" + assignedType +
             //               "' variables when its type is '" + symbolTable.getLocalVar(method.toString(), name).getType().getName() + "'.");
            //        return "<Invalid>";
              //  }
            }

        } else nodeToVisit = node.getJmmChild(0);

        type = getType(nodeToVisit);

        if (type != null) {
            if (!type.isArray()) {
                addSemanticErrorReport(reports, nodeToVisit, "Variable '" + type.getName() + "' cannot be indexed.");
                return "<Invalid>";
            }
        }
        for (JmmNode child : node.getChildren()) {
            if (child.getKind().equals("Literal")) {
                String idxType = visit(child, reports);

                if (!idxType.equals("int")) {
                    addSemanticErrorReport(reports, node, "Array indexes must be of type int.");
                    return "<Invalid>";
                }
            } else if (!child.equals(node.getJmmChild(0))) {
                String idx = "int";
                if (!idx.equals("int")){
                    addSemanticErrorReport(reports, node,
                            "Array indexes must be of type ints.");
                    return "<Invalid>";
                }

            } else {
                Type childType = getType(child);
                String idxType;
                if (childType == null) {
                    idxType = visit(child, reports);
                } else idxType = childType.getName();
                if (!idxType.equals("int")) {
                    addSemanticErrorReport(reports, node, "Array indexes must be of type int.");
                    return "<Invalid>";
                }
            }
        }
        if (type != null)
            return type.getName();
        return "";
    }
/**
    private Type getType(JmmNode node) {
        Type type = null;

        if (node.getAncestor("MethodDeclaration").isPresent()) {
            if (node.getAncestor("MethodDeclaration").get().getJmmParent().getKind().equals("MainMethod")) {
                List<String> a = symbolTable.getMethods();

            }

            //return getMethodByName(methodBody.get().getJmmParent().getJmmChild(0).getJmmChild(1).get("name"));
        }

        List<String> method = symbolTable.getMethods();
        if (node.getAttributes().contains("name")) {
            String varName = node.get("name");
            if (symbolTable.getLocalVar(method.toString(), varName) != null)
                type = symbolTable.getLocalVar(method.toString(), varName).getType();
            else if (symbolTable.getFieldByName(varName) != null)
                type = symbolTable.getFieldByName(varName).getType();
        }

        return type;
    }
**/



    public String visitArray(JmmNode jmmNode,List<Report> reports) {
        if (!symbolTable.hasSymbol(jmmNode.getKind(), jmmNode.get("int"))) {
            symbolTable.getReports().add(new Report(
                    ReportType.ERROR,
                    Stage.SEMANTIC,
                    Integer.parseInt(jmmNode.get("line")),
                    Integer.parseInt(jmmNode.get("column")),
                    "Variable " + jmmNode.get("int") + " wasn't found in this scope"
            ));
            return "";
        }
        return "";
    }


    private String visitCondition(JmmNode node, List<Report> reports) {

        for (JmmNode child : node.getChildren()) {
            String type = visit(child, reports);
            if (!type.equals("boolean")) {
                addSemanticErrorReport(reports, node, "Condition is not of type 'boolean'");
                return "<Invalid>";
            }
        }
        return "";
    }
